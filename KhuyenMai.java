/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package screen;

import com.mycompany.shop.dao.voucher_dao;
import com.mycompany.shop.dao.quan_ly_dao;
import com.mycompany.shop.model.voucher;
import com.mycompany.shop.model.quan_ly;
import com.mycompany.shop.model.UserSession;
import com.mycompany.shop.util.ModernTheme;
import com.mycompany.shop.util.UIHelper;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.List;
import javax.swing.ButtonGroup;

/**
 *
 * @author nguyenthanhquoc
 */
public class KhuyenMai extends javax.swing.JPanel {

        // DAO instances
        private voucher_dao voucherDAO;
        private quan_ly_dao quanLyDAO;

        // Data management
        private List<voucher> danhSachVoucher;
        private DefaultTableModel tableModel;
        private ButtonGroup statusButtonGroup;

        // Tracking variables
        private String maVoucherDangSua = null;
        private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        /**
         * Creates new form KhuyenMai
         */
        public KhuyenMai() {
                initComponents();
                initializeComponents();
                loadVoucherData();
                setupEventHandlers();
                applyUserPermissions();
                applyModernTheme();
        }

        private void applyModernTheme() {
                // Apply modern theme to the entire panel
                UIHelper.applyModernTheme(this);

                // Set background
                this.setBackground(ModernTheme.BACKGROUND_COLOR);
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(1200, 800));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 15)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("TẠO MÃ KHUYẾN MÃI");

        jLabel2.setText("Tên mã");

        jLabel3.setText("Mức giảm");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Ngày bắt đầu");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel5.setText("Ngày kết thúc");

        jLabel6.setText("Trạng thái");

        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Đang hoạt động");

        jRadioButton2.setText("Không hoạt động");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(102, 153, 255));
        jButton1.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jButton1.setText("Lưu");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 255, 102));
        jButton2.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jButton2.setText("Cập nhật");

        jButton3.setBackground(new java.awt.Color(255, 102, 102));
        jButton3.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jButton3.setText("Xóa");

        jButton4.setBackground(new java.awt.Color(102, 255, 102));
        jButton4.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jButton4.setText("MỚI");

        jLabel7.setText("Áp dụng Loại");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả loại" }));

        jLabel8.setText("Áp dụng sản phẩm");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả sản phẩm" }));

        jLabel10.setText("Số lượng");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField4)
                                .addComponent(jTextField3)
                                .addComponent(jTextField2)
                                .addComponent(jTextField1)
                                .addComponent(jComboBox2, 0, 183, Short.MAX_VALUE))
                            .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jRadioButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButton2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(199, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 1, 15)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("MÃ KHUYẾN MÃI");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã Voucher", "Tên", "Giá trị giảm", "Ngày bắt đầu", "Ngày kết thúc", "Số lượng", "Trạng Thái", "Quản lý"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1147, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

        private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jRadioButton2ActionPerformed
                // TODO add your handling code here:
        }// GEN-LAST:event_jRadioButton2ActionPerformed

        private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
                themVoucher();
        }// GEN-LAST:event_jButton1ActionPerformed

        private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jTextField2ActionPerformed
                // TODO add your handling code here:
        }// GEN-LAST:event_jTextField2ActionPerformed

        /**
         * Khởi tạo các components và cấu hình ban đầu
         */
        private void initializeComponents() {
                // Khởi tạo DAO
                voucherDAO = new voucher_dao();
                quanLyDAO = new quan_ly_dao();

                // Khởi tạo table model
                tableModel = (DefaultTableModel) jTable1.getModel();

                // Khởi tạo button group cho radio buttons
                statusButtonGroup = new ButtonGroup();
                statusButtonGroup.add(jRadioButton1);
                statusButtonGroup.add(jRadioButton2);

                // Set default selection
                jRadioButton1.setSelected(true); // Hoạt động

                // Set text cho radio buttons
                jRadioButton1.setText("Hoạt động");
                jRadioButton2.setText("Tạm dừng");

                // Cấu hình table
                jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

                // Set placeholder text cho date fields
                jTextField3.setToolTipText("Ngày bắt đầu (yyyy-MM-dd)");
                jTextField4.setToolTipText("Ngày kết thúc (yyyy-MM-dd)");

                // Set placeholder values
                jTextField3.setText("2024-01-01");
                jTextField4.setText("2024-12-31");
        }

        /**
         * Load dữ liệu voucher từ database
         */
        private void loadVoucherData() {
                try {
                        danhSachVoucher = voucherDAO.getAllVoucher();
                        updateTableData(danhSachVoucher);
                } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Lỗi khi tải dữ liệu voucher: " + e.getMessage(),
                                        "Lỗi", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                }
        }

        /**
         * Cập nhật dữ liệu table
         */
        private void updateTableData(List<voucher> vouchers) {
                tableModel.setRowCount(0); // Clear existing data

                for (voucher v : vouchers) {
                        Object[] row = {
                                        v.getMa_voucher(),
                                        v.getTen_voucher(),
                                        v.getGia_tri_giam() + "%",
                                        v.getNgay_bat_dau(),
                                        v.getNgay_ket_thuc(),
                                        v.getSo_luong(),
                                        v.getTrang_thai(),
                                        getQuanLyName(v.getId_quan_ly())
                        };
                        tableModel.addRow(row);
                }
        }

        /**
         * Lấy tên quản lý từ ID
         */
        private String getQuanLyName(int id_quan_ly) {
                try {
                        quan_ly ql = quanLyDAO.getQuanLyById(id_quan_ly);
                        return ql != null ? ql.getTen_quan_ly() : "N/A";
                } catch (Exception e) {
                        return "N/A";
                }
        }

        private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jTextField3ActionPerformed
                // TODO add your handling code here:
        }// GEN-LAST:event_jTextField3ActionPerformed

        /**
         * Setup event handlers cho các components
         */
        private void setupEventHandlers() {
                // Event cho table selection
                jTable1.getSelectionModel().addListSelectionListener(e -> {
                        if (!e.getValueIsAdjusting()) {
                                loadVoucherFromSelectedRow();
                        }
                });

                // Event cho buttons
                jButton2.addActionListener(e -> suaVoucher());
                jButton3.addActionListener(e -> xoaVoucher());
                jButton4.addActionListener(e -> clearForm());

                // Event cho search (nếu có search field)
                // Có thể thêm sau nếu cần
        }

        /**
         * Áp dụng phân quyền user
         */
        private void applyUserPermissions() {
                UserSession session = UserSession.getInstance();

                if (!session.isLoggedIn()) {
                        // Nếu chưa đăng nhập, disable tất cả
                        disableAllButtons();
                        return;
                }

                if (session.isEmployee()) {
                        // Nhân viên: Chỉ được xem, không được thêm/sửa/xóa
                        jButton1.setEnabled(false); // Lưu
                        jButton2.setEnabled(false); // Cập nhật
                        jButton3.setEnabled(false); // Xóa
                        jButton4.setEnabled(true); // Mới (chỉ clear form)

                        // Disable form inputs
                        jTextField1.setEnabled(false); // Tên mã
                        jTextField2.setEnabled(false); // Mức giảm
                        jTextField3.setEnabled(false); // Ngày bắt đầu
                        jTextField4.setEnabled(false); // Ngày kết thúc
                        jTextField5.setEnabled(false); // Số lượng
                        jRadioButton1.setEnabled(false);
                        jRadioButton2.setEnabled(false);
                        jComboBox1.setEnabled(false);
                        jComboBox2.setEnabled(false);

                        JOptionPane.showMessageDialog(this,
                                        "Bạn đang đăng nhập với quyền Nhân viên.\n" +
                                                        "Chỉ có thể xem danh sách mã khuyến mãi, không thể thêm/sửa/xóa.",
                                        "Thông tin quyền hạn", JOptionPane.INFORMATION_MESSAGE);
                } else if (session.isManager()) {
                        // Quản lý: Full quyền
                        enableAllButtons();
                }
        }

        /**
         * Disable tất cả buttons
         */
        private void disableAllButtons() {
                jButton1.setEnabled(false);
                jButton2.setEnabled(false);
                jButton3.setEnabled(false);
                jButton4.setEnabled(false);
        }

        /**
         * Enable tất cả buttons
         */
        private void enableAllButtons() {
                jButton1.setEnabled(true);
                jButton2.setEnabled(true);
                jButton3.setEnabled(true);
                jButton4.setEnabled(true);
        }

        /**
         * Load dữ liệu voucher từ dòng được chọn trong table
         */
        private void loadVoucherFromSelectedRow() {
                int selectedRow = jTable1.getSelectedRow();
                if (selectedRow >= 0) {
                        String maVoucher = (String) tableModel.getValueAt(selectedRow, 0);
                        String tenVoucher = (String) tableModel.getValueAt(selectedRow, 1);
                        String giaTriGiam = (String) tableModel.getValueAt(selectedRow, 2);
                        String ngayBatDau = tableModel.getValueAt(selectedRow, 3).toString();
                        String ngayKetThuc = tableModel.getValueAt(selectedRow, 4).toString();
                        String soLuong = tableModel.getValueAt(selectedRow, 5).toString();
                        String trangThai = (String) tableModel.getValueAt(selectedRow, 6);

                        // Load lên form
                        jTextField1.setText(tenVoucher);
                        jTextField2.setText(giaTriGiam.replace("%", "")); // Remove % sign
                        jTextField3.setText(ngayBatDau);
                        jTextField4.setText(ngayKetThuc);
                        jTextField5.setText(soLuong);

                        // Set radio button
                        if ("Hoạt động".equals(trangThai)) {
                                jRadioButton1.setSelected(true);
                        } else {
                                jRadioButton2.setSelected(true);
                        }

                        // Set tracking variable
                        maVoucherDangSua = maVoucher;

                        JOptionPane.showMessageDialog(this,
                                        "Đã load dữ liệu voucher '" + tenVoucher + "' lên form.",
                                        "Thông tin", JOptionPane.INFORMATION_MESSAGE);
                }
        }

        /**
         * Thêm voucher mới
         */
        private void themVoucher() {
                try {
                        // Kiểm tra quyền
                        UserSession session = UserSession.getInstance();
                        if (!session.isManager()) {
                                JOptionPane.showMessageDialog(this, "Chỉ quản lý mới được phép thêm mã khuyến mãi!",
                                                "Không đủ quyền", JOptionPane.ERROR_MESSAGE);
                                return;
                        }

                        // Lấy dữ liệu từ form
                        String tenVoucher = jTextField1.getText().trim();
                        String giaTriGiamStr = jTextField2.getText().trim();
                        String ngayBatDauStr = jTextField3.getText().trim();
                        String ngayKetThucStr = jTextField4.getText().trim();
                        String soLuongStr = jTextField5.getText().trim();
                        String trangThai = jRadioButton1.isSelected() ? "Hoạt động" : "Tạm dừng";

                        // Validation
                        if (tenVoucher.isEmpty() || giaTriGiamStr.isEmpty() || ngayBatDauStr.isEmpty() ||
                                        ngayKetThucStr.isEmpty() || soLuongStr.isEmpty()) {
                                JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin!",
                                                "Lỗi", JOptionPane.ERROR_MESSAGE);
                                return;
                        }

                        // Parse và validate dữ liệu
                        int giaTriGiam;
                        int soLuong;
                        Date ngayBatDau;
                        Date ngayKetThuc;

                        try {
                                giaTriGiam = Integer.parseInt(giaTriGiamStr);
                                soLuong = Integer.parseInt(soLuongStr);

                                if (giaTriGiam <= 0 || giaTriGiam > 100) {
                                        JOptionPane.showMessageDialog(this, "Giá trị giảm phải từ 1% đến 100%!",
                                                        "Lỗi", JOptionPane.ERROR_MESSAGE);
                                        return;
                                }

                                if (soLuong <= 0) {
                                        JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0!",
                                                        "Lỗi", JOptionPane.ERROR_MESSAGE);
                                        return;
                                }

                                ngayBatDau = Date.valueOf(ngayBatDauStr);
                                ngayKetThuc = Date.valueOf(ngayKetThucStr);

                                if (ngayKetThuc.before(ngayBatDau)) {
                                        JOptionPane.showMessageDialog(this, "Ngày kết thúc phải sau ngày bắt đầu!",
                                                        "Lỗi", JOptionPane.ERROR_MESSAGE);
                                        return;
                                }

                        } catch (NumberFormatException e) {
                                JOptionPane.showMessageDialog(this, "Giá trị giảm và số lượng phải là số nguyên!",
                                                "Lỗi", JOptionPane.ERROR_MESSAGE);
                                return;
                        } catch (IllegalArgumentException e) {
                                JOptionPane.showMessageDialog(this, "Định dạng ngày không hợp lệ! Sử dụng yyyy-MM-dd",
                                                "Lỗi", JOptionPane.ERROR_MESSAGE);
                                return;
                        }

                        // Tạo mã voucher tự động
                        String maVoucher = generateVoucherCode();

                        // Kiểm tra mã voucher trùng lặp
                        if (voucherDAO.checkMaVoucherExists(maVoucher)) {
                                JOptionPane.showMessageDialog(this, "Mã voucher đã tồn tại! Vui lòng thử lại.",
                                                "Lỗi", JOptionPane.ERROR_MESSAGE);
                                return;
                        }

                        // Thêm vào database
                        voucherDAO.addVoucher(maVoucher, tenVoucher, giaTriGiam, ngayBatDau, ngayKetThuc,
                                        soLuong, trangThai, session.getUserId());

                        JOptionPane.showMessageDialog(this, "Thêm mã khuyến mãi thành công!\nMã voucher: " + maVoucher,
                                        "Thành công", JOptionPane.INFORMATION_MESSAGE);

                        // Refresh data và clear form
                        loadVoucherData();
                        clearForm();

                } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Lỗi khi thêm mã khuyến mãi: " + e.getMessage(),
                                        "Lỗi", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                }
        }

        /**
         * Tạo mã voucher tự động
         */
        private String generateVoucherCode() {
                String prefix = "VC";
                long timestamp = System.currentTimeMillis();
                String code = prefix + String.valueOf(timestamp).substring(8); // Lấy 5 số cuối
                return code;
        }

        /**
         * Sửa voucher
         */
        private void suaVoucher() {
                try {
                        // Kiểm tra quyền
                        UserSession session = UserSession.getInstance();
                        if (!session.isManager()) {
                                JOptionPane.showMessageDialog(this, "Chỉ quản lý mới được phép sửa mã khuyến mãi!",
                                                "Không đủ quyền", JOptionPane.ERROR_MESSAGE);
                                return;
                        }

                        // Kiểm tra có voucher được chọn
                        if (maVoucherDangSua == null || maVoucherDangSua.isEmpty()) {
                                JOptionPane.showMessageDialog(this, "Vui lòng chọn voucher từ danh sách để sửa!",
                                                "Thông báo", JOptionPane.WARNING_MESSAGE);
                                return;
                        }

                        // Lấy dữ liệu từ form
                        String tenVoucher = jTextField1.getText().trim();
                        String giaTriGiamStr = jTextField2.getText().trim();
                        String ngayBatDauStr = jTextField3.getText().trim();
                        String ngayKetThucStr = jTextField4.getText().trim();
                        String soLuongStr = jTextField5.getText().trim();
                        String trangThai = jRadioButton1.isSelected() ? "Hoạt động" : "Tạm dừng";

                        // Validation (tương tự như thêm mới)
                        if (tenVoucher.isEmpty() || giaTriGiamStr.isEmpty() || ngayBatDauStr.isEmpty() ||
                                        ngayKetThucStr.isEmpty() || soLuongStr.isEmpty()) {
                                JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin!",
                                                "Lỗi", JOptionPane.ERROR_MESSAGE);
                                return;
                        }

                        // Parse dữ liệu
                        int giaTriGiam = Integer.parseInt(giaTriGiamStr);
                        int soLuong = Integer.parseInt(soLuongStr);
                        Date ngayBatDau = Date.valueOf(ngayBatDauStr);
                        Date ngayKetThuc = Date.valueOf(ngayKetThucStr);

                        // Validation
                        if (giaTriGiam <= 0 || giaTriGiam > 100) {
                                JOptionPane.showMessageDialog(this, "Giá trị giảm phải từ 1% đến 100%!",
                                                "Lỗi", JOptionPane.ERROR_MESSAGE);
                                return;
                        }

                        if (soLuong <= 0) {
                                JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0!",
                                                "Lỗi", JOptionPane.ERROR_MESSAGE);
                                return;
                        }

                        if (ngayKetThuc.before(ngayBatDau)) {
                                JOptionPane.showMessageDialog(this, "Ngày kết thúc phải sau ngày bắt đầu!",
                                                "Lỗi", JOptionPane.ERROR_MESSAGE);
                                return;
                        }

                        // Tìm voucher cần sửa
                        voucher voucherCanSua = voucherDAO.getVoucherByMa(maVoucherDangSua);
                        if (voucherCanSua == null) {
                                JOptionPane.showMessageDialog(this, "Không tìm thấy voucher cần sửa!",
                                                "Lỗi", JOptionPane.ERROR_MESSAGE);
                                return;
                        }

                        // Cập nhật trong database
                        voucherDAO.updateVoucher(voucherCanSua.getId_voucher(), maVoucherDangSua, tenVoucher,
                                        giaTriGiam, ngayBatDau, ngayKetThuc, soLuong, trangThai, session.getUserId());

                        JOptionPane.showMessageDialog(this, "Sửa mã khuyến mãi thành công!",
                                        "Thành công", JOptionPane.INFORMATION_MESSAGE);

                        // Refresh data và clear form
                        loadVoucherData();
                        clearForm();

                } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Lỗi khi sửa mã khuyến mãi: " + e.getMessage(),
                                        "Lỗi", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                }
        }

        /**
         * Xóa voucher
         */
        private void xoaVoucher() {
                try {
                        // Kiểm tra quyền
                        UserSession session = UserSession.getInstance();
                        if (!session.isManager()) {
                                JOptionPane.showMessageDialog(this, "Chỉ quản lý mới được phép xóa mã khuyến mãi!",
                                                "Không đủ quyền", JOptionPane.ERROR_MESSAGE);
                                return;
                        }

                        // Kiểm tra có voucher được chọn
                        if (maVoucherDangSua == null || maVoucherDangSua.isEmpty()) {
                                JOptionPane.showMessageDialog(this, "Vui lòng chọn voucher từ danh sách để xóa!",
                                                "Thông báo", JOptionPane.WARNING_MESSAGE);
                                return;
                        }

                        // Hiển thị dialog xác nhận
                        String tenVoucher = jTextField1.getText().trim();
                        int confirm = JOptionPane.showConfirmDialog(this,
                                        "Bạn có chắc chắn muốn xóa mã khuyến mãi:\n" +
                                                        "Mã: " + maVoucherDangSua + "\n" +
                                                        "Tên: " + tenVoucher + "\n\n" +
                                                        "Hành động này không thể hoàn tác!",
                                        "Xác nhận xóa mã khuyến mãi",
                                        JOptionPane.YES_NO_OPTION,
                                        JOptionPane.QUESTION_MESSAGE);

                        if (confirm != JOptionPane.YES_OPTION) {
                                return;
                        }

                        // Tìm voucher cần xóa
                        voucher voucherCanXoa = voucherDAO.getVoucherByMa(maVoucherDangSua);
                        if (voucherCanXoa == null) {
                                JOptionPane.showMessageDialog(this, "Không tìm thấy voucher cần xóa!",
                                                "Lỗi", JOptionPane.ERROR_MESSAGE);
                                return;
                        }

                        // Xóa trong database
                        voucherDAO.deleteVoucher(voucherCanXoa.getId_voucher());

                        JOptionPane.showMessageDialog(this, "Xóa mã khuyến mãi thành công!",
                                        "Thành công", JOptionPane.INFORMATION_MESSAGE);

                        // Refresh data và clear form
                        loadVoucherData();
                        clearForm();

                } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Lỗi khi xóa mã khuyến mãi: " + e.getMessage(),
                                        "Lỗi", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                }
        }

        /**
         * Clear form
         */
        private void clearForm() {
                jTextField1.setText("");
                jTextField2.setText("");
                jTextField3.setText("2024-01-01");
                jTextField4.setText("2024-12-31");
                jTextField5.setText("");
                jRadioButton1.setSelected(true);
                maVoucherDangSua = null;

                // Clear table selection
                jTable1.clearSelection();
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
}
